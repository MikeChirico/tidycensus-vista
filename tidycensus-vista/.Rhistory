addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = "selected_variable",
opacity = 1)
#making the actual map
new_census_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(new_census_data$broadband)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = "selected_variable",
opacity = 1)
new_census_data$broadband
View(new_census_data)
#making the actual map
new_census_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(new_census_data$broadband)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = "selected_variable",
opacity = 1)
#making the actual map
new_census_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(broadband)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = "selected_variable",
opacity = 1)
#making the actual map
new_census_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7
#color = ~ pal(broadband)
) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = "selected_variable",
opacity = 1)
toy %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected,
title = 'foo',
opacity = 1)
toy %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected,
title = 'foo',
opacity = 1)
pal <- colorQuantile(palette = "viridis", domain = selected, n = 10)
toy %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected,
title = 'foo',
opacity = 1)
pal <- colorQuantile(palette = "viridis", domain = selected_variable, n = 10)
pal <- colorQuantile(palette = "viridis", domain = selected_variable, n = 10)
selected_variable <- toy$med_income
pal <- colorQuantile(palette = "viridis", domain = selected_variable, n = 10)
toy %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = 'foo',
opacity = 1)
runApp()
runApp()
runApp()
toy %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = 'foo',
opacity = 1)
selected_data <- new_census_data
selected_variable <- selected_data$input$map_filter
S
selected_variable <- selected_data$SSI  #input$map_filter
#Creates color palette based on selected variable
pal <- colorQuantile(palette = "viridis", domain = selected_variable, n = 10)
#making the actual map
selected_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = input$map_filter,
opacity = 1)
#making the actual map
selected_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = selected_variable,
opacity = 1)
#making the actual map
selected_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = 'foo',
opacity = 1)
runApp()
runApp()
runApp()
selected_variable
runApp()
runApp()
runApp()
selected_data$input$map_filter
runApp()
selected_data$selector_input
selected_variable <- toy$med_income
pal <- colorQuantile(palette = "viridis", domain = selected_variable, n = 10)
toy %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = 'foo',
opacity = 1)
runApp()
runApp()
selected_data$broadband
selected_variable
runApp()
runApp()
runApp()
runApp()
runApp()
input$map_filter
runApp()
runApp()
runApp()
runApp()
runApp()
selected_data <- new_census_data
selector_input <- 'broadband'# input$map_filter
selected_variable <- selected_data$selector_input
selected_variable <- selected_data$broadband
#Creates color palette based on selected variable
pal <- colorQuantile(palette = "viridis", domain = selected_variable, n = 10)
#making the actual map
selected_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(selected_variable)) %>%
addLegend("bottomright",
pal = pal,
values = ~ selected_variable,
title = 'foo',
opacity = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
census_format <- function(state){
state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019)
true_zips <- state_zip$NAME %>% str_sub(7,11)
state_zip_final <- true_zips %>%
mutate(STATE = state)
state_zip_final$NAME <- true_zips
return(state_zip_final)
}
foob <- census_format("VT")
census_format <- function(state){
state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019)
true_zips <- state_zip$NAME %>% str_sub(7,11)
#state_zip_final <- true_zips %>% mutate(STATE = state)
state_zip_final$NAME <- true_zips
return(state_zip_final)
}
foob <- census_format("VT")
foob <- census_format("VT")
census_format <- function(state){
state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019)
true_zips <- state_zip$NAME %>% str_sub(7,11)
#state_zip_final <- true_zips %>% mutate(STATE = state)
state_zip$NAME <- true_zips
return(state_zip)
}
foob <- census_format("VT")
View(foob)
foob %>% mutate(STATE = "VT")
census_format <- function(state){
state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019)
true_zips <- state_zip$NAME %>% str_sub(7,11)
#state_zip_final <- true_zips %>% mutate(STATE = state)
state_zip$NAME <- true_zips
state_zip_final <- state_zip %>% mutate(type = state)
return(state_zip_final)
}
foob <- census_format("VT")
View(foob)
pb <- census_format("AR")
marq <- census_format("MI")
taos <- census_format("NM")
portsmouth <- census_format("OH")
indy <- census_format("OR")
springfield <- census_format("VT")
pb <- census_format("AR")
marq <- census_format("MI")
taos <- census_format("NM")
portsmouth <- census_format("OH")
indy <- census_format("OR")
springfield <- census_format("VT")
?rbind
all_comms <- rbind(pb, marq, taos, portsmouth, indy, springfield)
View(all_comms)
saveRDS(all_comms, "ALL_COMMUNITIES.rds")
View(all_comms)
runApp()
View(all_comms)
runApp()
fooooob <-         state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = "VT",
geometry = TRUE,
year = 2019) %>% mutate(type = "VT")
View(fooooob)
pb <- census_format("AR")
marq <- census_format("MI")
taos <- census_format("NM")
View(census_format)
census_format <- function(state){
state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019) %>%
mutate(STATE = state) %>%
mutate(type = "ZIP")
state_zip2 <- get_acs(geography = "tract",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019) %>%
mutate(STATE = state) %>%
mutate(type = "tract")
true_zips <- state_zip$NAME %>% str_sub(7,11)
true_zips2 <- state_zip2$NAME %>% str_sub(7,11)
state_zip$NAME <- true_zips
return(state_zip_final)
}
pb <- census_format("AR")
census_format <- function(state){
state_zip <- get_acs(geography = "zcta",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019) %>%
mutate(STATE = state) %>%
mutate(type = "ZIP")
state_zip2 <- get_acs(geography = "tract",
variables = c(med_income = "B19013_001",
broadband = "B28002_001",
SSI = "B09010_001"),
state = state,
geometry = TRUE,
year = 2019) %>%
mutate(STATE = state) %>%
mutate(type = "tract")
true_zips <- state_zip$NAME %>% str_sub(7,11)
state_zip$NAME <- true_zips
state_zip_final <- rbind(state_zip, state_zip2)
return(state_zip_final)
}
pb <- census_format("AR")
marq <- census_format("MI")
taos <- census_format("NM")
portsmouth <- census_format("OH")
indy <- census_format("OR")
springfield <- census_format("VT")
all_comms <- rbind(pb, marq, taos, portsmouth, indy, springfield)
saveRDS(all_comms, "ALL_COMMUNITIES.rds")
runApp()
View(all_comms)
runApp()
runApp()
runApp()
#filters data based on input
filtered_data <-
springfield %>% filter(variable == 'broadband') %>%
filter(type == 'zip')
View(filtered_data)
View(springfield)
#filters data based on input
filtered_data <-
springfield %>% filter(variable == 'broadband') %>%
filter(type == 'ZIP')
View(filtered_data)
#making the actual map
filtered_data %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(
popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~ estimate,
title = filtered_data$variable[1],
opacity = 1
)
runApp()
View(indy)
runApp()
runApp('~/Desktop/general/School/Fall 2019/MATH216/Final_Project')
runApp()
runApp()
View(all_comms)
all_comms$STATE %>% unique()
community <- c("AR", "MI", "NM", "OH", "OR", "VT")
latty <- c(34.225144200039,
46.597158844198965,
36.410414694018414,
38.73228468898352,
44.85247381476704,
43.29915952802458)
longg <- c(-92.00326861792746,
-87.3933541201746,
-105.57427805765356,
-82.99674689875215
-123.18471615622822,
-72.48528945998511)
sup_df <- data.frame(comm = community,
lat = latty,
long = longg)
longg <- c(-92.00326861792746,
-87.3933541201746,
-105.57427805765356,
-82.99674689875215,
-123.18471615622822,
-72.48528945998511)
sup_df <- data.frame(comm = community,
lat = latty,
long = longg)
runApp()
?addMarkers
View(sup_df)
runApp()
runApp()
runApp()
runApp('~/Desktop/CORI/indeed_daily_scraping/indeed_scraper/Indeed_scraper_shiny')
runApp()
runApp()
sup_df2 <- tibble(name = c("broadband", "med_income", "SSI"),
fancy_name = c("Broadband Access Percentile",
"Median Income Percentile",
"Reciept of Supplemental Security Income Percentile"))
View(sup_df2)
runApp()
?addLegend
runApp()
runApp()
runApp()
runApp('~/Desktop/CORI/indeed_daily_scraping/indeed_scraper/Indeed_scraper_shiny')
runApp()
runApp()
runApp()
runApp()
